/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef MAINVIEWBASE_HPP
#define MAINVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/main_screen/MainPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/widgets/TextArea.hpp>

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase();
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void buttonClicked_N()
    {
        // Override and implement this function in Main
    }
    virtual void buttonClicked_B()
    {
        // Override and implement this function in Main
    }
    virtual void buttonClicked_V()
    {
        // Override and implement this function in Main
    }
    virtual void buttonClicked_C()
    {
        // Override and implement this function in Main
    }
    virtual void buttonClicked_X()
    {
        // Override and implement this function in Main
    }
    virtual void buttonClicked_W()
    {
        // Override and implement this function in Main
    }
    virtual void buttonClicked_M()
    {
        // Override and implement this function in Main
    }
    virtual void buttonClicked_L()
    {
        // Override and implement this function in Main
    }
    virtual void buttonClicked_K()
    {
        // Override and implement this function in Main
    }
    virtual void buttonClicked_J()
    {
        // Override and implement this function in Main
    }
    virtual void buttonClicked_H()
    {
        // Override and implement this function in Main
    }
    virtual void buttonClicked_A()
    {
        // Override and implement this function in Main
    }
    virtual void buttonClicked_G()
    {
        // Override and implement this function in Main
    }
    virtual void buttonClicked_F()
    {
        // Override and implement this function in Main
    }
    virtual void buttonClicked_D()
    {
        // Override and implement this function in Main
    }
    virtual void buttonClicked_S()
    {
        // Override and implement this function in Main
    }
    virtual void buttonClicked_Q()
    {
        // Override and implement this function in Main
    }
    virtual void buttonClicked_P()
    {
        // Override and implement this function in Main
    }
    virtual void buttonClicked_O()
    {
        // Override and implement this function in Main
    }
    virtual void buttonClicked_I()
    {
        // Override and implement this function in Main
    }
    virtual void buttonClicked_U()
    {
        // Override and implement this function in Main
    }
    virtual void buttonClicked_Y()
    {
        // Override and implement this function in Main
    }
    virtual void buttonClicked_T()
    {
        // Override and implement this function in Main
    }
    virtual void buttonClicked_R()
    {
        // Override and implement this function in Main
    }
    virtual void buttonClicked_E()
    {
        // Override and implement this function in Main
    }
    virtual void buttonClicked_Z()
    {
        // Override and implement this function in Main
    }
    virtual void buttonClicked_Ok()
    {
        // Override and implement this function in Main
    }
    virtual void buttonClicked_Suppr()
    {
        // Override and implement this function in Main
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Container passwordBox;
    touchgfx::Image passwordBar;
    touchgfx::TextAreaWithOneWildcard passwordText;
    touchgfx::Container keypadButtons;
    touchgfx::Button letterN;
    touchgfx::Button letterB;
    touchgfx::Button letterV;
    touchgfx::Button letterC;
    touchgfx::Button letterX;
    touchgfx::Button letterW;
    touchgfx::Button butttonSuppr;
    touchgfx::Button buttonOk;
    touchgfx::Button letterM;
    touchgfx::Button letterL;
    touchgfx::Button letterK;
    touchgfx::Button letterJ;
    touchgfx::Button letterH;
    touchgfx::Button letterA;
    touchgfx::Button letterZ;
    touchgfx::Button letterE;
    touchgfx::Button letterR;
    touchgfx::Button letterT;
    touchgfx::Button letterY;
    touchgfx::Button letterU;
    touchgfx::Button letterI;
    touchgfx::Button letterO;
    touchgfx::Button letterP;
    touchgfx::Button letterQ;
    touchgfx::Button letterS;
    touchgfx::Button letterD;
    touchgfx::Button letterF;
    touchgfx::Button letterG;
    touchgfx::Container keypadLetters;
    touchgfx::TextArea A;
    touchgfx::TextArea Z;
    touchgfx::TextArea E;
    touchgfx::TextArea R;
    touchgfx::TextArea T;
    touchgfx::TextArea Y;
    touchgfx::TextArea U;
    touchgfx::TextArea I;
    touchgfx::TextArea O;
    touchgfx::TextArea P;
    touchgfx::TextArea Q;
    touchgfx::TextArea S;
    touchgfx::TextArea D;
    touchgfx::TextArea F;
    touchgfx::TextArea G;
    touchgfx::TextArea H;
    touchgfx::TextArea J;
    touchgfx::TextArea K;
    touchgfx::TextArea L;
    touchgfx::TextArea M;
    touchgfx::TextArea W;
    touchgfx::TextArea X;
    touchgfx::TextArea C;
    touchgfx::TextArea V;
    touchgfx::TextArea B;
    touchgfx::TextArea N;
    touchgfx::TextAreaWithOneWildcard feedbackText;

    /*
     * Wildcard Buffers
     */
    static const uint16_t PASSWORDTEXT_SIZE = 20;
    touchgfx::Unicode::UnicodeChar passwordTextBuffer[PASSWORDTEXT_SIZE];
    static const uint16_t FEEDBACKTEXT_SIZE = 20;
    touchgfx::Unicode::UnicodeChar feedbackTextBuffer[FEEDBACKTEXT_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<MainViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // MAINVIEWBASE_HPP
